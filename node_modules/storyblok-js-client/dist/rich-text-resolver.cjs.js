/*!
 * RichTextResolver v4.5.2
 * Universal JavaScript SDK for Storyblok's API
 * (c) 2020-2022 Stobylok Team
 */
"use strict";const t=function(t,r){if(!t)return null;let e={};for(let n in t){let a=t[n];r.indexOf(n)>-1&&null!==a&&(e[n]=a)}return e};var r={nodes:{horizontal_rule:()=>({singleTag:"hr"}),blockquote:()=>({tag:"blockquote"}),bullet_list:()=>({tag:"ul"}),code_block:t=>({tag:["pre",{tag:"code",attrs:t.attrs}]}),hard_break:()=>({singleTag:"br"}),heading:t=>({tag:`h${t.attrs.level}`}),image:r=>({singleTag:[{tag:"img",attrs:t(r.attrs,["src","alt","title"])}]}),list_item:()=>({tag:"li"}),ordered_list:()=>({tag:"ol"}),paragraph:()=>({tag:"p"})},marks:{bold:()=>({tag:"b"}),strike:()=>({tag:"strike"}),underline:()=>({tag:"u"}),strong:()=>({tag:"strong"}),code:()=>({tag:"code"}),italic:()=>({tag:"i"}),link(t){const r={...t.attrs},{linktype:e="url"}=t.attrs;return"email"===e&&(r.href=`mailto:${r.href}`),r.anchor&&(r.href=`${r.href}#${r.anchor}`,delete r.anchor),{tag:[{tag:"a",attrs:r}]}},styled:t=>({tag:[{tag:"span",attrs:t.attrs}]})}};module.exports=class{constructor(t){t||(t=r),this.marks=t.marks||[],this.nodes=t.nodes||[]}addNode(t,r){this.nodes[t]=r}addMark(t,r){this.marks[t]=r}render(t={}){if(t.content&&Array.isArray(t.content)){let r="";return t.content.forEach((t=>{r+=this.renderNode(t)})),r}return console.warn("The render method must receive an object with a content field, which is an array"),""}renderNode(t){let r=[];t.marks&&t.marks.forEach((t=>{const e=this.getMatchingMark(t);e&&r.push(this.renderOpeningTag(e.tag))}));const e=this.getMatchingNode(t);return e&&e.tag&&r.push(this.renderOpeningTag(e.tag)),t.content?t.content.forEach((t=>{r.push(this.renderNode(t))})):t.text?r.push(function(t){const r={"&":"&amp;","<":"&lt;",">":"&gt;",'"':"&quot;","'":"&#39;"},e=/[&<>"']/g,n=RegExp(e.source);return t&&n.test(t)?t.replace(e,(t=>r[t])):t}(t.text)):e&&e.singleTag?r.push(this.renderTag(e.singleTag," /")):e&&e.html&&r.push(e.html),e&&e.tag&&r.push(this.renderClosingTag(e.tag)),t.marks&&t.marks.slice(0).reverse().forEach((t=>{const e=this.getMatchingMark(t);e&&r.push(this.renderClosingTag(e.tag))})),r.join("")}renderTag(t,r){if(t.constructor===String)return`<${t}${r}>`;return t.map((t=>{if(t.constructor===String)return`<${t}${r}>`;{let e=`<${t.tag}`;if(t.attrs)for(let r in t.attrs){let n=t.attrs[r];null!==n&&(e+=` ${r}="${n}"`)}return`${e}${r}>`}})).join("")}renderOpeningTag(t){return this.renderTag(t,"")}renderClosingTag(t){if(t.constructor===String)return`</${t}>`;return t.slice(0).reverse().map((t=>t.constructor===String?`</${t}>`:`</${t.tag}>`)).join("")}getMatchingNode(t){if("function"==typeof this.nodes[t.type])return this.nodes[t.type](t)}getMatchingMark(t){if("function"==typeof this.marks[t.type])return this.marks[t.type](t)}};
