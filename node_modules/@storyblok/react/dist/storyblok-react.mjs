var __defProp = Object.defineProperty;
var __defProps = Object.defineProperties;
var __getOwnPropDescs = Object.getOwnPropertyDescriptors;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b2) => {
  for (var prop in b2 || (b2 = {}))
    if (__hasOwnProp.call(b2, prop))
      __defNormalProp(a, prop, b2[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b2)) {
      if (__propIsEnum.call(b2, prop))
        __defNormalProp(a, prop, b2[prop]);
    }
  return a;
};
var __spreadProps = (a, b2) => __defProps(a, __getOwnPropDescs(b2));
var __objRest = (source, exclude) => {
  var target = {};
  for (var prop in source)
    if (__hasOwnProp.call(source, prop) && exclude.indexOf(prop) < 0)
      target[prop] = source[prop];
  if (source != null && __getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(source)) {
      if (exclude.indexOf(prop) < 0 && __propIsEnum.call(source, prop))
        target[prop] = source[prop];
    }
  return target;
};
import React, { forwardRef, useState, useEffect } from "react";
let k = false;
const b = [], w = (n) => new Promise((e, t) => {
  if (typeof window > "u" || (window.storyblokRegisterEvent = (r) => {
    if (window.location === window.parent.location) {
      console.warn("You are not in Draft Mode or in the Visual Editor.");
      return;
    }
    k ? r() : b.push(r);
  }, document.getElementById("storyblok-javascript-bridge")))
    return;
  const s = document.createElement("script");
  s.async = true, s.src = n, s.id = "storyblok-javascript-bridge", s.onerror = (r) => t(r), s.onload = (r) => {
    b.forEach((o) => o()), k = true, e(r);
  }, document.getElementsByTagName("head")[0].appendChild(s);
});
var $ = Object.defineProperty, j = (n, e, t) => e in n ? $(n, e, { enumerable: true, configurable: true, writable: true, value: t }) : n[e] = t, c = (n, e, t) => (j(n, typeof e != "symbol" ? e + "" : e, t), t);
function v(n) {
  return !(n !== n || n === 1 / 0 || n === -1 / 0);
}
function x(n, e, t) {
  if (!v(e))
    throw new TypeError("Expected `limit` to be a finite number");
  if (!v(t))
    throw new TypeError("Expected `interval` to be a finite number");
  const s = [];
  let r = [], o = 0;
  const i = function() {
    o++;
    const l = setTimeout(function() {
      o--, s.length > 0 && i(), r = r.filter(function(u) {
        return u !== l;
      });
    }, t);
    r.indexOf(l) < 0 && r.push(l);
    const h = s.shift();
    h.resolve(n.apply(h.self, h.args));
  }, a = function(...l) {
    const h = this;
    return new Promise(function(u, f) {
      s.push({
        resolve: u,
        reject: f,
        args: l,
        self: h
      }), o < e && i();
    });
  };
  return a.abort = function() {
    r.forEach(clearTimeout), r = [], s.forEach(function(l) {
      l.reject(function() {
        Error.call(this, "Throttled function aborted"), this.name = "AbortError";
      });
    }), s.length = 0;
  }, a;
}
const E = function(n, e) {
  const t = {};
  for (const s in n) {
    const r = n[s];
    e.indexOf(s) > -1 && r !== null && (t[s] = r);
  }
  return t;
}, P = (n) => n === "email", S = () => ({
  singleTag: "hr"
}), O = () => ({
  tag: "blockquote"
}), C = () => ({
  tag: "ul"
}), I = (n) => ({
  tag: [
    "pre",
    {
      tag: "code",
      attrs: n.attrs
    }
  ]
}), A = () => ({
  singleTag: "br"
}), N = (n) => ({
  tag: `h${n.attrs.level}`
}), M = (n) => ({
  singleTag: [
    {
      tag: "img",
      attrs: E(n.attrs, ["src", "alt", "title"])
    }
  ]
}), L = () => ({
  tag: "li"
}), U = () => ({
  tag: "ol"
}), H = () => ({
  tag: "p"
}), B = () => ({
  tag: "b"
}), q = () => ({
  tag: "strike"
}), D = () => ({
  tag: "u"
}), J = () => ({
  tag: "strong"
}), F = () => ({
  tag: "code"
}), V = () => ({
  tag: "i"
}), z = (n) => {
  const e = __spreadValues({}, n.attrs), { linktype: t = "url" } = n.attrs;
  return P(t) && (e.href = `mailto:${e.href}`), e.anchor && (e.href = `${e.href}#${e.anchor}`, delete e.anchor), {
    tag: [
      {
        tag: "a",
        attrs: e
      }
    ]
  };
}, Y = (n) => ({
  tag: [
    {
      tag: "span",
      attrs: n.attrs
    }
  ]
}), K = {
  nodes: {
    horizontal_rule: S,
    blockquote: O,
    bullet_list: C,
    code_block: I,
    hard_break: A,
    heading: N,
    image: M,
    list_item: L,
    ordered_list: U,
    paragraph: H
  },
  marks: {
    bold: B,
    strike: q,
    underline: D,
    strong: J,
    code: F,
    italic: V,
    link: z,
    styled: Y
  }
}, Q = function(n) {
  const e = {
    "&": "&amp;",
    "<": "&lt;",
    ">": "&gt;",
    '"': "&quot;",
    "'": "&#39;"
  }, t = /[&<>"']/g, s = RegExp(t.source);
  return n && s.test(n) ? n.replace(t, (r) => e[r]) : n;
};
class g {
  constructor(e) {
    c(this, "marks"), c(this, "nodes"), e || (e = K), this.marks = e.marks || [], this.nodes = e.nodes || [];
  }
  addNode(e, t) {
    this.nodes[e] = t;
  }
  addMark(e, t) {
    this.marks[e] = t;
  }
  render(e) {
    if (e && e.content && Array.isArray(e.content)) {
      let t = "";
      return e.content.forEach((s) => {
        t += this.renderNode(s);
      }), t;
    }
    return console.warn("The render method must receive an object with a content field, which is an array"), "";
  }
  renderNode(e) {
    const t = [];
    e.marks && e.marks.forEach((r) => {
      const o = this.getMatchingMark(r);
      o && t.push(this.renderOpeningTag(o.tag));
    });
    const s = this.getMatchingNode(e);
    return s && s.tag && t.push(this.renderOpeningTag(s.tag)), e.content ? e.content.forEach((r) => {
      t.push(this.renderNode(r));
    }) : e.text ? t.push(Q(e.text)) : s && s.singleTag ? t.push(this.renderTag(s.singleTag, " /")) : s && s.html && t.push(s.html), s && s.tag && t.push(this.renderClosingTag(s.tag)), e.marks && e.marks.slice(0).reverse().forEach((r) => {
      const o = this.getMatchingMark(r);
      o && t.push(this.renderClosingTag(o.tag));
    }), t.join("");
  }
  renderTag(e, t) {
    return e.constructor === String ? `<${e}${t}>` : e.map((s) => {
      if (s.constructor === String)
        return `<${s}${t}>`;
      {
        let r = `<${s.tag}`;
        if (s.attrs)
          for (const o in s.attrs) {
            const i = s.attrs[o];
            i !== null && (r += ` ${o}="${i}"`);
          }
        return `${r}${t}>`;
      }
    }).join("");
  }
  renderOpeningTag(e) {
    return this.renderTag(e, "");
  }
  renderClosingTag(e) {
    return e.constructor === String ? `</${e}>` : e.slice(0).reverse().map((t) => t.constructor === String ? `</${t}>` : `</${t.tag}>`).join("");
  }
  getMatchingNode(e) {
    const t = this.nodes[e.type];
    if (typeof t == "function")
      return t(e);
  }
  getMatchingMark(e) {
    const t = this.marks[e.type];
    if (typeof t == "function")
      return t(e);
  }
}
class T {
  constructor() {
    c(this, "isCDNUrl", (e = "") => e.indexOf("/cdn/") > -1), c(this, "getOptionsPage", (e, t = 25, s = 1) => __spreadProps(__spreadValues({}, e), {
      per_page: t,
      page: s
    })), c(this, "delay", (e) => new Promise((t) => setTimeout(t, e))), c(this, "arrayFrom", (e = 0, t) => [...Array(e)].map(t)), c(this, "range", (e = 0, t = e) => {
      const s = Math.abs(t - e) || 0, r = e < t ? 1 : -1;
      return this.arrayFrom(s, (o, i) => i * r + e);
    }), c(this, "asyncMap", async (e, t) => Promise.all(e.map(t))), c(this, "flatMap", (e = [], t) => e.map(t).reduce((s, r) => [...s, ...r], []));
  }
  stringify(e, t, s) {
    const r = [];
    for (const o in e) {
      if (!Object.prototype.hasOwnProperty.call(e, o))
        continue;
      const i = e[o], a = s ? "" : encodeURIComponent(o);
      let l;
      typeof i == "object" ? l = this.stringify(i, t ? t + encodeURIComponent("[" + a + "]") : a, Array.isArray(i)) : l = (t ? t + encodeURIComponent("[" + a + "]") : a) + "=" + encodeURIComponent(i), r.push(l);
    }
    return r.join("&");
  }
}
class G {
  constructor(e) {
    c(this, "baseURL"), c(this, "timeout"), c(this, "headers"), c(this, "responseInterceptor"), c(this, "fetch"), c(this, "ejectInterceptor"), c(this, "url"), c(this, "parameters"), this.baseURL = e.baseURL, this.headers = e.headers || [], this.timeout = e != null && e.timeout ? e.timeout * 1e3 : 0, this.responseInterceptor = e.responseInterceptor, this.fetch = (...t) => e.fetch ? e.fetch(...t) : fetch(...t), this.ejectInterceptor = false, this.url = "", this.parameters = {};
  }
  get(e, t) {
    return this.url = e, this.parameters = t, this._methodHandler("get");
  }
  post(e, t) {
    return this.url = e, this.parameters = t, this._methodHandler("post");
  }
  put(e, t) {
    return this.url = e, this.parameters = t, this._methodHandler("put");
  }
  delete(e, t) {
    return this.url = e, this.parameters = t, this._methodHandler("delete");
  }
  async _responseHandler(e) {
    const t = [], s = {
      data: {},
      headers: {},
      status: 0,
      statusText: ""
    };
    e.status !== 204 && await e.json().then((r) => {
      s.data = r;
    });
    for (const r of e.headers.entries())
      t[r[0]] = r[1];
    return s.headers = __spreadValues({}, t), s.status = e.status, s.statusText = e.statusText, s;
  }
  async _methodHandler(e) {
    let t = `${this.baseURL}${this.url}`, s = null;
    if (e === "get") {
      const l = new T();
      t = `${this.baseURL}${this.url}?${l.stringify(this.parameters)}`;
    } else
      s = JSON.stringify(this.parameters);
    const r = new URL(t), o = new AbortController(), { signal: i } = o;
    let a;
    this.timeout && (a = setTimeout(() => o.abort(), this.timeout));
    try {
      const l = await this.fetch(`${r}`, {
        method: e,
        headers: this.headers,
        body: s,
        signal: i
      });
      this.timeout && clearTimeout(a);
      const h = await this._responseHandler(l);
      return this.responseInterceptor && !this.ejectInterceptor ? this._statusHandler(this.responseInterceptor(h)) : this._statusHandler(h);
    } catch (l) {
      return l;
    }
  }
  eject() {
    this.ejectInterceptor = true;
  }
  _statusHandler(e) {
    const t = /20[0-6]/g;
    return new Promise((s, r) => {
      if (t.test(`${e.status}`))
        return s(e);
      const o = {
        message: new Error(e.statusText || `status: ${e.status}`),
        response: e
      };
      r(o);
    });
  }
}
let p = {};
const d = {};
class W {
  constructor(e, t) {
    if (c(this, "client"), c(this, "maxRetries"), c(this, "throttle"), c(this, "accessToken"), c(this, "cache"), c(this, "helpers"), c(this, "relations"), c(this, "links"), c(this, "richTextResolver"), c(this, "resolveNestedRelations"), !t) {
      const o = e.region ? `-${e.region}` : "", i = e.https === false ? "http" : "https";
      e.oauthToken ? t = `${i}://api${o}.storyblok.com/v1` : t = `${i}://api${o}.storyblok.com/v2`;
    }
    const s = new Headers();
    s.set("Content-Type", "application/json"), s.set("Accept", "application/json"), s.forEach((o, i) => {
      e.headers && e.headers[i] && s.set(i, e.headers[i]);
    });
    let r = 5;
    e.oauthToken && (s.set("Authorization", e.oauthToken), r = 3), e.rateLimit && (r = e.rateLimit), e.richTextSchema ? this.richTextResolver = new g(e.richTextSchema) : this.richTextResolver = new g(), e.componentResolver && this.setComponentResolver(e.componentResolver), this.maxRetries = e.maxRetries, this.throttle = x(this.throttledRequest, r, 1e3), this.accessToken = e.accessToken || "", this.relations = {}, this.links = {}, this.cache = e.cache || { clear: "manual" }, this.helpers = new T(), this.resolveNestedRelations = false, this.client = new G({
      baseURL: t,
      timeout: e.timeout || 0,
      headers: s,
      responseInterceptor: e.responseInterceptor,
      fetch: e.fetch
    });
  }
  setComponentResolver(e) {
    this.richTextResolver.addNode("blok", (t) => {
      let s = "";
      return t.attrs.body.forEach((r) => {
        s += e(r.component, r);
      }), {
        html: s
      };
    });
  }
  parseParams(e) {
    return e.version || (e.version = "published"), e.token || (e.token = this.getToken()), e.cv || (e.cv = d[e.token]), Array.isArray(e.resolve_relations) && (e.resolve_relations = e.resolve_relations.join(",")), e;
  }
  factoryParamOptions(e, t) {
    return this.helpers.isCDNUrl(e) ? this.parseParams(t) : t;
  }
  makeRequest(e, t, s, r) {
    const o = this.factoryParamOptions(e, this.helpers.getOptionsPage(t, s, r));
    return this.cacheResponse(e, o);
  }
  get(e, t) {
    t || (t = {});
    const s = `/${e}`, r = this.factoryParamOptions(s, t);
    return this.cacheResponse(s, r);
  }
  async getAll(e, t, s) {
    const r = (t == null ? void 0 : t.per_page) || 25, o = `/${e}`, i = o.split("/"), a = s || i[i.length - 1], l = 1, h = await this.makeRequest(o, t, r, l), u = h.total ? Math.ceil(h.total / r) : 1, f = await this.helpers.asyncMap(this.helpers.range(l, u), (m) => this.makeRequest(o, t, r, m + 1));
    return this.helpers.flatMap([h, ...f], (m) => Object.values(m.data[a]));
  }
  post(e, t) {
    const s = `/${e}`;
    return Promise.resolve(this.throttle("post", s, t));
  }
  put(e, t) {
    const s = `/${e}`;
    return Promise.resolve(this.throttle("put", s, t));
  }
  delete(e, t) {
    const s = `/${e}`;
    return Promise.resolve(this.throttle("delete", s, t));
  }
  getStories(e) {
    return this.get("cdn/stories", e);
  }
  getStory(e, t) {
    return this.get(`cdn/stories/${e}`, t);
  }
  getToken() {
    return this.accessToken;
  }
  ejectInterceptor() {
    this.client.eject();
  }
  _cleanCopy(e) {
    return JSON.parse(JSON.stringify(e));
  }
  _insertLinks(e, t) {
    const s = e[t];
    s && s.fieldtype == "multilink" && s.linktype == "story" && typeof s.id == "string" && this.links[s.id] ? s.story = this._cleanCopy(this.links[s.id]) : s && s.linktype === "story" && typeof s.uuid == "string" && this.links[s.uuid] && (s.story = this._cleanCopy(this.links[s.uuid]));
  }
  _insertRelations(e, t, s) {
    if (s.indexOf(`${e.component}.${t}`) > -1) {
      if (typeof e[t] == "string")
        this.relations[e[t]] && (e[t] = this._cleanCopy(this.relations[e[t]]));
      else if (e[t] && e[t].constructor === Array) {
        const r = [];
        e[t].forEach((o) => {
          this.relations[o] && r.push(this._cleanCopy(this.relations[o]));
        }), e[t] = r;
      }
    }
  }
  iterateTree(e, t) {
    const s = (r) => {
      if (r != null) {
        if (r.constructor === Array)
          for (let o = 0; o < r.length; o++)
            s(r[o]);
        else if (r.constructor === Object) {
          if (r._stopResolving)
            return;
          for (const o in r)
            (r.component && r._uid || r.type === "link") && (this._insertRelations(r, o, t), this._insertLinks(r, o)), s(r[o]);
        }
      }
    };
    s(e.content);
  }
  async resolveLinks(e, t) {
    let s = [];
    if (e.link_uuids) {
      const r = e.link_uuids.length, o = [], i = 50;
      for (let a = 0; a < r; a += i) {
        const l = Math.min(r, a + i);
        o.push(e.link_uuids.slice(a, l));
      }
      for (let a = 0; a < o.length; a++)
        (await this.getStories({
          per_page: i,
          language: t.language,
          version: t.version,
          by_uuids: o[a].join(",")
        })).data.stories.forEach((l) => {
          s.push(l);
        });
    } else
      s = e.links;
    s.forEach((r) => {
      this.links[r.uuid] = __spreadProps(__spreadValues({}, r), { _stopResolving: true });
    });
  }
  async resolveRelations(e, t) {
    let s = [];
    if (e.rel_uuids) {
      const r = e.rel_uuids.length, o = [], i = 50;
      for (let a = 0; a < r; a += i) {
        const l = Math.min(r, a + i);
        o.push(e.rel_uuids.slice(a, l));
      }
      for (let a = 0; a < o.length; a++)
        (await this.getStories({
          per_page: i,
          language: t.language,
          version: t.version,
          by_uuids: o[a].join(",")
        })).data.stories.forEach((l) => {
          s.push(l);
        });
    } else
      s = e.rels;
    s && s.length > 0 && s.forEach((r) => {
      this.relations[r.uuid] = __spreadProps(__spreadValues({}, r), { _stopResolving: true });
    });
  }
  async resolveStories(e, t) {
    var s, r;
    let o = [];
    if (typeof t.resolve_relations < "u" && t.resolve_relations.length > 0 && (typeof t.resolve_relations == "string" && (o = t.resolve_relations.split(",")), await this.resolveRelations(e, t)), t.resolve_links && ["1", "story", "url"].indexOf(t.resolve_links) > -1 && ((s = e.links) != null && s.length || (r = e.link_uuids) != null && r.length) && await this.resolveLinks(e, t), this.resolveNestedRelations)
      for (const i in this.relations)
        this.iterateTree(this.relations[i], o);
    e.story ? this.iterateTree(e.story, o) : e.stories.forEach((i) => {
      this.iterateTree(i, o);
    });
  }
  cacheResponse(e, t, s) {
    return new Promise((r, o) => {
      const i = this.helpers.stringify({ url: e, params: t }), a = this.cacheProvider();
      if (this.cache.clear === "auto" && t.version === "draft" && this.flushCache(), t.version === "published" && e != "/cdn/spaces/me") {
        const l = a.get(i);
        if (l)
          return r(l);
      }
      try {
        (async () => {
          var l;
          const h = await this.throttle("get", e, t);
          let u = { data: h.data, headers: h.headers };
          if ((l = h.headers) != null && l["per-page"] && (u = Object.assign({}, u, {
            perPage: h.headers["per-page"] ? parseInt(h.headers["per-page"]) : 0,
            total: h.headers["per-page"] ? parseInt(h.headers.total) : 0
          })), h.status != 200)
            return o(h);
          (u.data.story || u.data.stories) && await this.resolveStories(u.data, t), t.version === "published" && e != "/cdn/spaces/me" && a.set(i, u), u.data.cv && t.token && (t.version == "draft" && d[t.token] != u.data.cv && this.flushCache(), d[t.token] = u.data.cv), r(u);
        })();
      } catch {
      }
    });
  }
  throttledRequest(e, t, s) {
    return this.client[e](t, s);
  }
  cacheVersions() {
    return d;
  }
  cacheVersion() {
    return d[this.accessToken];
  }
  setCacheVersion(e) {
    this.accessToken && (d[this.accessToken] = e);
  }
  cacheProvider() {
    switch (this.cache.type) {
      case "memory":
        return {
          get(e) {
            return p[e];
          },
          getAll() {
            return p;
          },
          set(e, t) {
            p[e] = t;
          },
          flush() {
            p = {};
          }
        };
      default:
        return {
          get() {
          },
          getAll() {
          },
          set() {
          },
          flush() {
          }
        };
    }
  }
  flushCache() {
    return this.cacheProvider().flush(), this;
  }
}
const X = (n = {}) => {
  const { apiOptions: e } = n;
  if (!e.accessToken) {
    console.error("You need to provide an access token to interact with Storyblok API. Read https://www.storyblok.com/docs/api/content-delivery#topics/authentication");
    return;
  }
  return { storyblokApi: new W(e) };
}, Z = (n) => {
  if (typeof n != "object" || typeof n._editable > "u")
    return {};
  const e = JSON.parse(n._editable.replace(/^<!--#storyblok#/, "").replace(/-->$/, ""));
  return {
    "data-blok-c": JSON.stringify(e),
    "data-blok-uid": e.id + "-" + e.uid
  };
};
let y;
const R = "https://app.storyblok.com/f/storyblok-v2-latest.js", ee = (n, e, t = {}) => {
  if (!(typeof window > "u")) {
    if (typeof window.storyblokRegisterEvent > "u") {
      console.error("Storyblok Bridge is disabled. Please enable it to use it. Read https://github.com/storyblok/storyblok-js");
      return;
    }
    if (!n) {
      console.warn("Story ID is not defined. Please provide a valid ID.");
      return;
    }
    window.storyblokRegisterEvent(() => {
      new window.StoryblokBridge(t).on(["input", "published", "change"], (r) => {
        r.action === "input" && r.story.id === n ? e(r.story) : (r.action === "change" || r.action === "published") && r.storyId === n && window.location.reload();
      });
    });
  }
}, te = (n = {}) => {
  const {
    bridge: e,
    accessToken: t,
    use: s = [],
    apiOptions: r = {},
    richText: o = {}
  } = n;
  r.accessToken = r.accessToken || t;
  const i = { bridge: e, apiOptions: r };
  let a = {};
  return s.forEach((l) => {
    a = __spreadValues(__spreadValues({}, a), l(i));
  }), e !== false && w(R), y = new g(o.schema), o.resolver && _(y, o.resolver), a;
}, _ = (n, e) => {
  n.addNode("blok", (t) => {
    let s = "";
    return t.attrs.body.forEach((r) => {
      s += e(r.component, r);
    }), {
      html: s
    };
  });
}, se = (n, e, t) => {
  let s = t || y;
  if (!s) {
    console.error("Please initialize the Storyblok SDK before calling the renderRichText function");
    return;
  }
  return n === "" ? "" : n ? (e && (s = new g(e.schema), e.resolver && _(s, e.resolver)), s.render(n)) : (console.warn(`${n} is not a valid Richtext object. This might be because the value of the richtext field is empty.
    
  For more info about the richtext object check https://github.com/storyblok/storyblok-js#rendering-rich-text`), "");
};
const StoryblokComponent = forwardRef((_a, ref) => {
  var _b = _a, { blok } = _b, restProps = __objRest(_b, ["blok"]);
  if (!blok) {
    console.error("Please provide a 'blok' property to the StoryblokComponent");
    return /* @__PURE__ */ React.createElement("div", null, "Please provide a blok property to the StoryblokComponent");
  }
  const Component = getComponent(blok.component);
  if (Component) {
    return /* @__PURE__ */ React.createElement(Component, __spreadValues({
      ref,
      blok
    }, restProps));
  }
  return /* @__PURE__ */ React.createElement("div", null);
});
StoryblokComponent.displayName = "StoryblokComponent";
const useStoryblok = (slug, apiOptions = {}, bridgeOptions = {}) => {
  let [story, setStory] = useState({});
  if (!storyblokApiInstance) {
    console.error("You can't use useStoryblok if you're not loading apiPlugin.");
    return null;
  }
  const isBridgeEnable = typeof window !== "undefined" && typeof window.storyblokRegisterEvent !== "undefined";
  useEffect(() => {
    async function initStory() {
      const { data } = await storyblokApiInstance.get(`cdn/stories/${slug}`, apiOptions);
      setStory(data.story);
      if (isBridgeEnable && data.story.id) {
        ee(data.story.id, (story2) => setStory(story2), bridgeOptions);
      }
    }
    initStory();
  }, [slug]);
  return story;
};
const useStoryblokState = (initialStory = null, bridgeOptions = {}) => {
  let [story, setStory] = useState(initialStory);
  const isBridgeEnable = typeof window !== "undefined" && typeof window.storyblokRegisterEvent !== "undefined";
  if (!isBridgeEnable || !initialStory) {
    return initialStory;
  }
  useEffect(() => {
    setStory(initialStory);
    ee(story.id, (newStory) => setStory(newStory), bridgeOptions);
  }, [initialStory]);
  return story;
};
let storyblokApiInstance = null;
const useStoryblokApi = () => {
  if (!storyblokApiInstance) {
    console.error("You can't use getStoryblokApi if you're not loading apiPlugin.");
  }
  return storyblokApiInstance;
};
let componentsMap = {};
const getComponent = (componentKey) => {
  if (!componentsMap[componentKey]) {
    console.error(`Component ${componentKey} doesn't exist.`);
    return false;
  }
  return componentsMap[componentKey];
};
const storyblokInit = (pluginOptions = {}) => {
  const { storyblokApi } = te(pluginOptions);
  storyblokApiInstance = storyblokApi;
  componentsMap = pluginOptions.components;
};
export { g as RichTextResolver, K as RichTextSchema, StoryblokComponent, X as apiPlugin, getComponent, useStoryblokApi as getStoryblokApi, ee as registerStoryblokBridge, se as renderRichText, Z as storyblokEditable, storyblokInit, useStoryblok, useStoryblokApi, ee as useStoryblokBridge, useStoryblokState };
